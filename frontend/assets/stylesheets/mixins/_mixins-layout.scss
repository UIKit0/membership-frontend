// =============================================================================
// Layout Mixins
// =============================================================================

@import '../components/bower-components/sass-mq/mq';

// Guss - https://github.com/guardian/guss
// =============================================================================

@import '../components/bower-components/guss-rem/rem';
@import '../components/bower-components/guss-typography/typography';
@import '../components/bower-components/guss-css3/css3';
@import '../components/bower-components/guss-layout/columns';
@import '../components/bower-components/guss-layout/row';

// Grid system
// =============================================================================
// gs- prefixes stand for Grid System

// Configuration
$gs-gutter: 20px;
$gs-baseline: 12px;
$gs-column-width: 60px;
$gs-row-height: 36px;
$gs-max-columns: 16;

// Grid system helpers
@function gs-span($n-columns) {
    @return $n-columns * $gs-column-width + $gs-gutter * ($n-columns - 1);
}

@function gs-height($n-rows) {
    @return $n-rows * $gs-row-height + $gs-baseline * ($n-rows - 1);
}

@mixin gs-container {
    position: relative;
    margin: 0 auto;
    max-width: rem(gs-span(14) + $gs-gutter * 2);

    @include mq(wide) {
        max-width: rem(gs-span(16) + $gs-gutter * 2);
    }
}

// Output grid system helper classes
@mixin grid-system {
    .gs-container {
        @include gs-container;
    }
}

// Side Margins
// =============================================================================
// a dynamic mixin so we can reuse these measurements
// for other properties â€“ the media queries and widths
// need to match the ones in layout.scss

@mixin side-margins-calc($property) {
    $offset: ($gs-gutter * 2);
    @include mq(tablet) {
        $width: map-get($max-widths, max-tablet);
        #{$property}: -webkit-calc((100% - #{rem($width + $offset)}) / 2);
        #{$property}: calc((100% - #{rem($width + $offset)}) / 2);
    }
    @include mq(mem-full) {
        $width: map-get($max-widths, max-desktop);
        #{$property}: -webkit-calc((100% - #{rem($width + $offset)}) / 2);
        #{$property}: calc((100% - #{rem($width + $offset)}) / 2);
    }
}

// Columns
// =============================================================================
@mixin columns($cols: 1, $gap: 0) {
    @if $browser-supports-columns {
        -webkit-column-count: $cols;
        -moz-column-count: $cols;
        column-count: $cols;

        -webkit-column-gap: rem($gap);
        -moz-column-gap: rem($gap);
        column-gap: rem($gap);
    } @else {
        margin-left: 0 - rem($gap / 2);
        margin-right: 0 - rem($gap / 2);
        & > * {
            @include box-sizing(border-box);
            width: (100% / $cols);
            float: left;
            padding-left: rem($gap / 2);
            padding-right: rem($gap / 2);
        }
    }
}

// Helpers
// =============================================================================
@mixin vertically-center() {
    @include transform(translateY(-50%));
    top: 50%;
    margin: 0 auto;
    display: block;
}
